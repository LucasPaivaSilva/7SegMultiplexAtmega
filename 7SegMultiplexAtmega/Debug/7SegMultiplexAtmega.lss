
7SegMultiplexAtmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000248  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800110  00800110  000002ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f93  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000884  00000000  00000000  00001357  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000649  00000000  00000000  00001bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00002224  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000457  00000000  00000000  000022f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e3  00000000  00000000  0000274b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000302e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  9e:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ident_num>:
}
//---------------------------------------------------------------------------------------------
//Conversão de um número em seus digitos individuais
//---------------------------------------------------------------------------------------------
void ident_num(unsigned int valor, unsigned char *disp)
{   
  a6:	ac 01       	movw	r20, r24
  a8:	fb 01       	movw	r30, r22
  aa:	db 01       	movw	r26, r22
  ac:	9b 01       	movw	r18, r22
  ae:	2b 5f       	subi	r18, 0xFB	; 251
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
 	unsigned char n;

	for(n=0; n<tam_vetor; n++)
		disp[n] = 0 + conv_ascii;		//limpa vetor para armazenagem do digitos 
  b2:	80 e3       	ldi	r24, 0x30	; 48
  b4:	8d 93       	st	X+, r24
//---------------------------------------------------------------------------------------------
void ident_num(unsigned int valor, unsigned char *disp)
{   
 	unsigned char n;

	for(n=0; n<tam_vetor; n++)
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <ident_num+0xe>
		disp[n] = 0 + conv_ascii;		//limpa vetor para armazenagem do digitos 

	do
	{
       *disp = (valor%10) + conv_ascii;	//pega o resto da divisao por 10 
  bc:	9a 01       	movw	r18, r20
  be:	ad ec       	ldi	r26, 0xCD	; 205
  c0:	bc ec       	ldi	r27, 0xCC	; 204
  c2:	0e 94 13 01 	call	0x226	; 0x226 <__umulhisi3>
  c6:	96 95       	lsr	r25
  c8:	87 95       	ror	r24
  ca:	96 95       	lsr	r25
  cc:	87 95       	ror	r24
  ce:	96 95       	lsr	r25
  d0:	87 95       	ror	r24
  d2:	9c 01       	movw	r18, r24
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	82 0f       	add	r24, r18
  e6:	93 1f       	adc	r25, r19
  e8:	9a 01       	movw	r18, r20
  ea:	28 1b       	sub	r18, r24
  ec:	39 0b       	sbc	r19, r25
  ee:	c9 01       	movw	r24, r18
  f0:	80 5d       	subi	r24, 0xD0	; 208
  f2:	81 93       	st	Z+, r24
	   valor /=10;						//pega o inteiro da divisão por 10
  f4:	9a 01       	movw	r18, r20
  f6:	0e 94 13 01 	call	0x226	; 0x226 <__umulhisi3>
  fa:	ac 01       	movw	r20, r24
  fc:	56 95       	lsr	r21
  fe:	47 95       	ror	r20
 100:	56 95       	lsr	r21
 102:	47 95       	ror	r20
 104:	56 95       	lsr	r21
 106:	47 95       	ror	r20
	   disp++;

	}while (valor!=0);
 108:	41 15       	cp	r20, r1
 10a:	51 05       	cpc	r21, r1
 10c:	b9 f6       	brne	.-82     	; 0xbc <ident_num+0x16>
}
 10e:	08 95       	ret

00000110 <__vector_11>:
int y = 0;
unsigned char digits[4];
unsigned char segValue [16] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x18, 0x08, 0x03, 0x46, 0x21, 0x06, 0x0E};
	
ISR(TIMER1_COMPA_vect) //interrupção do TC1
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
	y++;
 122:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 126:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 130:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	switch (y)
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	91 05       	cpc	r25, r1
 138:	a1 f0       	breq	.+40     	; 0x162 <__vector_11+0x52>
 13a:	1c f4       	brge	.+6      	; 0x142 <__vector_11+0x32>
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	39 f0       	breq	.+14     	; 0x14e <__vector_11+0x3e>
 140:	31 c0       	rjmp	.+98     	; 0x1a4 <__vector_11+0x94>
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	91 05       	cpc	r25, r1
 146:	b9 f0       	breq	.+46     	; 0x176 <__vector_11+0x66>
 148:	04 97       	sbiw	r24, 0x04	; 4
 14a:	f9 f0       	breq	.+62     	; 0x18a <__vector_11+0x7a>
 14c:	2b c0       	rjmp	.+86     	; 0x1a4 <__vector_11+0x94>
	{
		case 1:
		PORTC = 0b1110001;
 14e:	81 e7       	ldi	r24, 0x71	; 113
 150:	88 b9       	out	0x08, r24	; 8
		PORTD = segValue[digits[3]- '0'];
 152:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <digits+0x3>
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	e0 53       	subi	r30, 0x30	; 48
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	80 81       	ld	r24, Z
 15e:	8b b9       	out	0x0b, r24	; 11
		break;
 160:	21 c0       	rjmp	.+66     	; 0x1a4 <__vector_11+0x94>

		case 2:
		PORTC = 0b1110010;
 162:	82 e7       	ldi	r24, 0x72	; 114
 164:	88 b9       	out	0x08, r24	; 8
		PORTD = segValue[digits[2]- '0'];
 166:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <digits+0x2>
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	e0 53       	subi	r30, 0x30	; 48
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	80 81       	ld	r24, Z
 172:	8b b9       	out	0x0b, r24	; 11
		break;
 174:	17 c0       	rjmp	.+46     	; 0x1a4 <__vector_11+0x94>
		
		case 3:
		PORTC = 0b1110100;
 176:	84 e7       	ldi	r24, 0x74	; 116
 178:	88 b9       	out	0x08, r24	; 8
		PORTD = segValue[digits[1]- '0'];
 17a:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <digits+0x1>
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	e0 53       	subi	r30, 0x30	; 48
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	80 81       	ld	r24, Z
 186:	8b b9       	out	0x0b, r24	; 11
		break;
 188:	0d c0       	rjmp	.+26     	; 0x1a4 <__vector_11+0x94>
		
		case 4:
		PORTC = 0b1111000;
 18a:	88 e7       	ldi	r24, 0x78	; 120
 18c:	88 b9       	out	0x08, r24	; 8
		PORTD = segValue[digits[0]- '0'];
 18e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <digits>
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	e0 53       	subi	r30, 0x30	; 48
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	80 81       	ld	r24, Z
 19a:	8b b9       	out	0x0b, r24	; 11
		y = 0;
 19c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 1a0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		break;	
	}
	
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <main>:

int main(void)
{
	DDRD  = 0xFF;	//Conigura como saida
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	8a b9       	out	0x0a, r24	; 10
	DDRC  = 0xFF;	//Conigura como saida
 1ba:	87 b9       	out	0x07, r24	; 7
    
	TCNT1 = 0;
 1bc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1c0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1A = 77;
 1c4:	8d e4       	ldi	r24, 0x4D	; 77
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TC1 com prescaler de 1024
 1d0:	8d e0       	ldi	r24, 0x0D	; 13
 1d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1<<OCIE1A); //habilita a interrupção do T1
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sei();
 1dc:	78 94       	sei
	
    while (1) 
    {
	for(x=0;x<10000;x++)
 1de:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <x+0x1>
 1e2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <x>
	{
		cont++;					
 1e6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <cont>
 1ea:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cont+0x1>
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <cont+0x1>
 1f4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <cont>
		ident_num(cont, digits);
 1f8:	66 e1       	ldi	r22, 0x16	; 22
 1fa:	71 e0       	ldi	r23, 0x01	; 1
 1fc:	0e 94 53 00 	call	0xa6	; 0xa6 <ident_num>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	8f e3       	ldi	r24, 0x3F	; 63
 202:	9c e9       	ldi	r25, 0x9C	; 156
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <main+0x4e>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x54>
 20a:	00 00       	nop
	TIMSK1 = (1<<OCIE1A); //habilita a interrupção do T1
	sei();
	
    while (1) 
    {
	for(x=0;x<10000;x++)
 20c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <x>
 210:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <x+0x1>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <x+0x1>
 21a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <x>
 21e:	80 31       	cpi	r24, 0x10	; 16
 220:	97 42       	sbci	r25, 0x27	; 39
 222:	0c f3       	brlt	.-62     	; 0x1e6 <main+0x30>
 224:	dc cf       	rjmp	.-72     	; 0x1de <main+0x28>

00000226 <__umulhisi3>:
 226:	a2 9f       	mul	r26, r18
 228:	b0 01       	movw	r22, r0
 22a:	b3 9f       	mul	r27, r19
 22c:	c0 01       	movw	r24, r0
 22e:	a3 9f       	mul	r26, r19
 230:	70 0d       	add	r23, r0
 232:	81 1d       	adc	r24, r1
 234:	11 24       	eor	r1, r1
 236:	91 1d       	adc	r25, r1
 238:	b2 9f       	mul	r27, r18
 23a:	70 0d       	add	r23, r0
 23c:	81 1d       	adc	r24, r1
 23e:	11 24       	eor	r1, r1
 240:	91 1d       	adc	r25, r1
 242:	08 95       	ret

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
