
7SegMultiplexAtmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000310  000003a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000310  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800110  00800110  000003b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fcd  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000884  00000000  00000000  00001461  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ce  00000000  00000000  00001ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000023b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047a  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092c  00000000  00000000  00002922  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000324e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  9e:	0c 94 86 01 	jmp	0x30c	; 0x30c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ident_num>:
}
//---------------------------------------------------------------------------------------------
//Conversão de um número em seus digitos individuais
//---------------------------------------------------------------------------------------------
void ident_num(unsigned int valor, unsigned char *disp)
{   
  a6:	ac 01       	movw	r20, r24
  a8:	fb 01       	movw	r30, r22
  aa:	db 01       	movw	r26, r22
  ac:	9b 01       	movw	r18, r22
  ae:	2b 5f       	subi	r18, 0xFB	; 251
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
 	unsigned char n;

	for(n=0; n<tam_vetor; n++)
		disp[n] = 0 + conv_ascii;		//limpa vetor para armazenagem do digitos 
  b2:	80 e3       	ldi	r24, 0x30	; 48
  b4:	8d 93       	st	X+, r24
//---------------------------------------------------------------------------------------------
void ident_num(unsigned int valor, unsigned char *disp)
{   
 	unsigned char n;

	for(n=0; n<tam_vetor; n++)
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <ident_num+0xe>
		disp[n] = 0 + conv_ascii;		//limpa vetor para armazenagem do digitos 

	do
	{
       *disp = (valor%10) + conv_ascii;	//pega o resto da divisao por 10 
  bc:	9a 01       	movw	r18, r20
  be:	ad ec       	ldi	r26, 0xCD	; 205
  c0:	bc ec       	ldi	r27, 0xCC	; 204
  c2:	0e 94 77 01 	call	0x2ee	; 0x2ee <__umulhisi3>
  c6:	96 95       	lsr	r25
  c8:	87 95       	ror	r24
  ca:	96 95       	lsr	r25
  cc:	87 95       	ror	r24
  ce:	96 95       	lsr	r25
  d0:	87 95       	ror	r24
  d2:	9c 01       	movw	r18, r24
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	82 0f       	add	r24, r18
  e6:	93 1f       	adc	r25, r19
  e8:	9a 01       	movw	r18, r20
  ea:	28 1b       	sub	r18, r24
  ec:	39 0b       	sbc	r19, r25
  ee:	c9 01       	movw	r24, r18
  f0:	80 5d       	subi	r24, 0xD0	; 208
  f2:	81 93       	st	Z+, r24
	   valor /=10;						//pega o inteiro da divisão por 10
  f4:	9a 01       	movw	r18, r20
  f6:	0e 94 77 01 	call	0x2ee	; 0x2ee <__umulhisi3>
  fa:	ac 01       	movw	r20, r24
  fc:	56 95       	lsr	r21
  fe:	47 95       	ror	r20
 100:	56 95       	lsr	r21
 102:	47 95       	ror	r20
 104:	56 95       	lsr	r21
 106:	47 95       	ror	r20
	   disp++;

	}while (valor!=0);
 108:	41 15       	cp	r20, r1
 10a:	51 05       	cpc	r21, r1
 10c:	b9 f6       	brne	.-82     	; 0xbc <ident_num+0x16>
}
 10e:	08 95       	ret

00000110 <__vector_11>:
int debouncePB5 = 0;
unsigned char digits[4];
unsigned char segValue [16] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x18, 0x08, 0x03, 0x46, 0x21, 0x06, 0x0E};
	
ISR(TIMER1_COMPA_vect) //interrupção do TC1
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
	y++;
 122:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <y>
 126:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <y+0x1>
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <y+0x1>
 130:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <y>
	switch (y)
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	91 05       	cpc	r25, r1
 138:	a1 f0       	breq	.+40     	; 0x162 <__vector_11+0x52>
 13a:	1c f4       	brge	.+6      	; 0x142 <__vector_11+0x32>
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	39 f0       	breq	.+14     	; 0x14e <__vector_11+0x3e>
 140:	31 c0       	rjmp	.+98     	; 0x1a4 <__vector_11+0x94>
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	91 05       	cpc	r25, r1
 146:	b9 f0       	breq	.+46     	; 0x176 <__vector_11+0x66>
 148:	04 97       	sbiw	r24, 0x04	; 4
 14a:	f9 f0       	breq	.+62     	; 0x18a <__vector_11+0x7a>
 14c:	2b c0       	rjmp	.+86     	; 0x1a4 <__vector_11+0x94>
	{
		case 1:
		PORTC = 0b1111110;
 14e:	8e e7       	ldi	r24, 0x7E	; 126
 150:	88 b9       	out	0x08, r24	; 8
		PORTD = segValue[digits[3]- '0'];
 152:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <digits+0x3>
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	e0 53       	subi	r30, 0x30	; 48
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	80 81       	ld	r24, Z
 15e:	8b b9       	out	0x0b, r24	; 11
		break;
 160:	21 c0       	rjmp	.+66     	; 0x1a4 <__vector_11+0x94>

		case 2:
		PORTC = 0b1111101;
 162:	8d e7       	ldi	r24, 0x7D	; 125
 164:	88 b9       	out	0x08, r24	; 8
		PORTD = segValue[digits[2]- '0'];
 166:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <digits+0x2>
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	e0 53       	subi	r30, 0x30	; 48
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	80 81       	ld	r24, Z
 172:	8b b9       	out	0x0b, r24	; 11
		break;
 174:	17 c0       	rjmp	.+46     	; 0x1a4 <__vector_11+0x94>
		
		case 3:
		PORTC = 0b1111011;
 176:	8b e7       	ldi	r24, 0x7B	; 123
 178:	88 b9       	out	0x08, r24	; 8
		PORTD = segValue[digits[1]- '0'];
 17a:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <digits+0x1>
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	e0 53       	subi	r30, 0x30	; 48
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	80 81       	ld	r24, Z
 186:	8b b9       	out	0x0b, r24	; 11
		break;
 188:	0d c0       	rjmp	.+26     	; 0x1a4 <__vector_11+0x94>
		
		case 4:
		PORTC = 0b110111;
 18a:	87 e3       	ldi	r24, 0x37	; 55
 18c:	88 b9       	out	0x08, r24	; 8
		PORTD = segValue[digits[0]- '0'];
 18e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <digits>
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	e0 53       	subi	r30, 0x30	; 48
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	80 81       	ld	r24, Z
 19a:	8b b9       	out	0x0b, r24	; 11
		y = 0;
 19c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <y+0x1>
 1a0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <y>
		break;	
	}
	
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <__vector_3>:

ISR(PCINT0_vect) //interrupção do TC1
{
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
	if ((!tst_bit(PINB, PB4))&&(debouncePB4==0))
 1c4:	1c 99       	sbic	0x03, 4	; 3
 1c6:	11 c0       	rjmp	.+34     	; 0x1ea <__vector_3+0x34>
 1c8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <debouncePB4>
 1cc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <debouncePB4+0x1>
 1d0:	89 2b       	or	r24, r25
 1d2:	59 f4       	brne	.+22     	; 0x1ea <__vector_3+0x34>
	{
		x = 0;
 1d4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <x+0x1>
 1d8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <x>
		debouncePB4 = 1;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <debouncePB4+0x1>
 1e4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <debouncePB4>
 1e8:	1f c0       	rjmp	.+62     	; 0x228 <__vector_3+0x72>
	}
	else if ((!tst_bit(PINB, PB5))&&(debouncePB5==0))
 1ea:	1d 99       	sbic	0x03, 5	; 3
 1ec:	1d c0       	rjmp	.+58     	; 0x228 <__vector_3+0x72>
 1ee:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1f2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1f6:	89 2b       	or	r24, r25
 1f8:	b9 f4       	brne	.+46     	; 0x228 <__vector_3+0x72>
	{
		if (stop == 1)
 1fa:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <stop>
 1fe:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <stop+0x1>
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	29 f4       	brne	.+10     	; 0x210 <__vector_3+0x5a>
		{
			stop = 0;
 206:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <stop+0x1>
 20a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <stop>
 20e:	06 c0       	rjmp	.+12     	; 0x21c <__vector_3+0x66>
		} 
		else
		{
			stop = 1;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <stop+0x1>
 218:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <stop>
		}
 		debouncePB5 = 1;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 224:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	}
}
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <main>:

int main(void)
{
	DDRD  = 0xFF;	//Conigura como saida
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	8a b9       	out	0x0a, r24	; 10
	DDRC  = 0xFF;	//Conigura como saida
 23a:	87 b9       	out	0x07, r24	; 7
	DDRB  = 0x00;	//Configura como entrada
 23c:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xFF;	//Habilita pull up's
 23e:	85 b9       	out	0x05, r24	; 5
	
    PCICR = 1<<PCIE0;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    PCMSK0 = (1<<PCINT4) | (1<<PCINT5);
 246:	80 e3       	ldi	r24, 0x30	; 48
 248:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	
	TCNT1 = 0;
 24c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 250:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1A = 77;
 254:	8d e4       	ldi	r24, 0x4D	; 77
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 25c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TC1 com prescaler de 1024
 260:	8d e0       	ldi	r24, 0x0D	; 13
 262:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1<<OCIE1A); //habilita a interrupção do T1
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sei();
 26c:	78 94       	sei
	
    while (1) 
    {
	if (stop == 0)
 26e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <stop>
 272:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <stop+0x1>
 276:	89 2b       	or	r24, r25
 278:	49 f4       	brne	.+18     	; 0x28c <main+0x56>
	{
		x++;
 27a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <x>
 27e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <x+0x1>
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <x+0x1>
 288:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <x>
	}			
	ident_num(x, digits);
 28c:	6a e1       	ldi	r22, 0x1A	; 26
 28e:	71 e0       	ldi	r23, 0x01	; 1
 290:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <x>
 294:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <x+0x1>
 298:	0e 94 53 00 	call	0xa6	; 0xa6 <ident_num>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	81 ee       	ldi	r24, 0xE1	; 225
 2a0:	94 e0       	ldi	r25, 0x04	; 4
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0x6c>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x76>
 2ac:	00 00       	nop
	_delay_ms(100);
	if (debouncePB4 == 1)
 2ae:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <debouncePB4>
 2b2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <debouncePB4+0x1>
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	21 f4       	brne	.+8      	; 0x2c2 <main+0x8c>
	{
		debouncePB4 = 0; 
 2ba:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <debouncePB4+0x1>
 2be:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <debouncePB4>
	}
	if (debouncePB5 == 1)
 2c2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 2c6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	21 f4       	brne	.+8      	; 0x2d6 <main+0xa0>
	{
		debouncePB5 = 0;
 2ce:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 2d2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	}
	if (x>=10000)
 2d6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <x>
 2da:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <x+0x1>
 2de:	80 31       	cpi	r24, 0x10	; 16
 2e0:	97 42       	sbci	r25, 0x27	; 39
 2e2:	2c f2       	brlt	.-118    	; 0x26e <main+0x38>
	{
		x=0;
 2e4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <x+0x1>
 2e8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <x>
 2ec:	c0 cf       	rjmp	.-128    	; 0x26e <main+0x38>

000002ee <__umulhisi3>:
 2ee:	a2 9f       	mul	r26, r18
 2f0:	b0 01       	movw	r22, r0
 2f2:	b3 9f       	mul	r27, r19
 2f4:	c0 01       	movw	r24, r0
 2f6:	a3 9f       	mul	r26, r19
 2f8:	70 0d       	add	r23, r0
 2fa:	81 1d       	adc	r24, r1
 2fc:	11 24       	eor	r1, r1
 2fe:	91 1d       	adc	r25, r1
 300:	b2 9f       	mul	r27, r18
 302:	70 0d       	add	r23, r0
 304:	81 1d       	adc	r24, r1
 306:	11 24       	eor	r1, r1
 308:	91 1d       	adc	r25, r1
 30a:	08 95       	ret

0000030c <_exit>:
 30c:	f8 94       	cli

0000030e <__stop_program>:
 30e:	ff cf       	rjmp	.-2      	; 0x30e <__stop_program>
